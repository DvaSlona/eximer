    1. Site Controls
       (each setting that effects a domain, needs another option:
	'can the domain admin override the siteadmin or not, for
	 individual users'. These setting are marked with a *)
	a. Add/Modify/Delete domain
	b. Domain can add admin
	c. Procmail available switch *
	d. SpamAssassin available *
	e. Virus scanner available *
	f. Mail list available
	g. Quota can be set *
	h. Blacklists can be set *
	i. UID/GID *
	j. Domain tag line can be added *
	k. Add/Modify/Delete domain admin *
	l. Add/Modify/Delete relay_domains
	m. Password complexity requirements *
	o. Add the ability to choose any filesystem directory
	   -> Check the permissions to make sure Exim can create it

    2. Domain Controls (depends on site settings)
       (each setting that effects a user, needs another option:
	'can the user override the domain admin or not for personal
	 preference'. These setting are marked with a *)
	a. Add/delete/modify users
	b. Add/delete/modify admins
	c. Add/delete/modify aliases *
	d. Set quotas
	e. SpamAssassin settings *
	f. Virus Scanner *
	g. Blacklists *
	h. Mail lists
	i. UID/GID
	j. Domain tag line attached to all outgoing mail *
	k. Allow any user or alias to act as domain admin
	l. Password complexity requirements
	m. Multiple levels of 'admin':
	   -> Some who can one add users, some who can only change
	      passwords, others who can only create aliases, etc
	      Eg, when an admin tries to create an alias, assign the
	      variable '$task=addalias', and query the db to see if the
	      admin has the privilege to do this. This requires a
	      'flags' column in the db.

    3. User Controls  (depends on site and domain settings)
	a. Change password
	b. SpamAssassin settings
	c. Virus scanner settings
	d. Personal block lists
	e. Add alias (?)
	f. Vacation response
	g. Create exim_filter's in the database

    4. System Controls
	a. Choose from multiple databases: MySQL, PostgreSQL, LDAP

    5. Setup
	a. Scripts used to configure vexim the first time.
	   -> These scripts should be deleted (for security purposes)
	      after configuration is completed.
	      The scripts will create the basic database (with site-wide
	      settings), various tables, and the variables.php file from
	      the site admin's input. Would it be wise to require a
	      user/password with enough privileges to create a database
	      and grant privileges on it? I've seen this done with other
	      programs. It certainly makes things easier, but some
	      people might have a problem with entering the mysql god
	      password.
	b. Reduce the overall number of PHP files in the package, by
	   consolidating common functions.
	   -> Various 'submit' pages can be consolidated to one or two,
	      etc.
